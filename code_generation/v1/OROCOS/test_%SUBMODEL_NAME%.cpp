/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  %FILE_NAME%
 *  subm:  %SUBMODEL_NAME%
 *  model: %MODEL_NAME%
 *  expmt: %EXPERIMENT_NAME%
 *  date:  %GENERATION_DATE%
 *  time:  %GENERATION_TIME%
 *  user:  %USER_NAME%
 *  from:  %COMPANY_NAME%
 *  build: %GENERATION_BUILD%
 **********************************************************/

/* This file is a demo application of how the submodel function can
 * be used. It uses the global time variables that are used by both
 * the submodel and the integration method.
 *
 * PLEASE NOTE: THIS IS AN EXAMPLE WHERE ALL INPUTS ARE ZERO !
 * USE YOUR OWN INPUTS INSTEAD!! ALSO THE SUBMODEL MIGHT SIMPLY
 * NOT WORK CORRECTLY WITH INPUTS THAT ARE ZERO.
 */

#include <stdio.h>

/* 20-sim submodel class include file */
#include "%SUBMODEL_NAME%.h"

/* the main function */
int main()
{
	XXDouble u [%NUMBER_INPUTS% + 1];
	XXDouble y [%NUMBER_OUTPUTS% + 1];

	/* initialize the inputs and outputs with correct initial values */
%INITIALIZE_INPUTS%
%INITIALIZE_OUTPUTS%

	%SUBMODEL_NAME% my20simSubmodel;

	/* initialize the submodel itself */
	my20simSubmodel.Initialize(u, y, 0.0);

	/* simple loop, the time is incremented by the integration method */
	while (my20simSubmodel.state != %SUBMODEL_NAME%::finished)
	{
		/* call the submodel to calculate the output */
		my20simSubmodel.Calculate (u, y);
		printf("Time: %f\n", my20simSubmodel.GetTime() );
	}

	/* perform the final calculations */
	my20simSubmodel.Terminate (u, y);

	/* and we are done */
	return 0;
}
